openapi: 3.1.0
info:
  title: Auth Service API
  description: Production-ready Go authentication service with FAANG-level security controls
  version: 1.0.0
  contact:
    name: Auth Service Team
    email: support@authservice.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://api.authservice.com/v1
    description: Production server

security:
  - BearerAuth: []

paths:
  /signup:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Create a new user account with email confirmation
      operationId: signup
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /login:
    post:
      tags:
        - Authentication
      summary: User authentication
      description: Authenticate user and return JWT tokens
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /confirm-email:
    get:
      tags:
        - Authentication
      summary: Email confirmation
      description: Confirm user email address using token
      operationId: confirmEmail
      security: []
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
          description: Email confirmation token
      responses:
        '200':
          description: Email confirmed successfully
          content:
            text/html:
              schema:
                type: string
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /token/refresh:
    post:
      tags:
        - Authentication
      summary: Token refresh
      description: Refresh access token using refresh token
      operationId: refreshToken
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout user and revoke refresh tokens
      operationId: logout
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /password-reset/request:
    post:
      tags:
        - Password Reset
      summary: Request password reset
      description: Send password reset email to user
      operationId: requestPasswordReset
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '200':
          description: Reset email sent (if account exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /sessions:
    get:
      tags:
        - Session Management
      summary: Get active sessions
      description: List all active sessions for the authenticated user
      operationId: getSessions
      responses:
        '200':
          description: Active sessions retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionsResponse'

  /mfa/enable:
    post:
      tags:
        - Multi-Factor Authentication
      summary: Enable MFA
      description: Enable multi-factor authentication for user
      operationId: enableMFA
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnableMFARequest'
      responses:
        '200':
          description: MFA setup information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFASetupResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    SignupRequest:
      type: object
      required:
        - fullname
        - username
        - email
        - password
        - confirm_password
      properties:
        fullname:
          type: string
          minLength: 1
          maxLength: 100
          example: "John Doe"
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          minLength: 12
          example: "SecurePassword123!"
        confirm_password:
          type: string
          example: "SecurePassword123!"
        device_id:
          type: string
          example: "web-browser-001"

    LoginRequest:
      type: object
      required:
        - username_or_email
        - password
      properties:
        username_or_email:
          type: string
          example: "johndoe"
        password:
          type: string
          example: "SecurePassword123!"
        device_id:
          type: string
          example: "web-browser-001"

    UserInfo:
      type: object
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        username:
          type: string
          example: "johndoe"
        email:
          type: string
          example: "john@example.com"
        fullname:
          type: string
          example: "John Doe"

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expires_at:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
        user:
          $ref: '#/components/schemas/UserInfo'

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Invalid credentials"
        code:
          type: string
          example: "AUTH_001"
        details:
          type: string
          example: "Username or password is incorrect"

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: "Operation completed successfully"