name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'  # Changed to stable version
  NODE_VERSION: '20'  # Updated to LTS version
  GOPATH: ${{ github.workspace }}/go
  GOBIN: ${{ github.workspace }}/go/bin
  GO111MODULE: 'on'

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      CGO_ENABLED: 0
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: false

    - name: Get Go dependencies
      run: |
        go mod download
        go mod verify

    - name: Install Node dependencies
      run: pnpm install --frozen-lockfile

    - name: Run Go tests
      env:
        DATABASE_URL: "postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable"
        REDIS_URL: "redis://localhost:6379/0"
        JWT_ACCESS_SECRET: "test-secret-key-32-bytes-long-123456"
        JWT_REFRESH_SECRET: "test-refresh-secret-key-32-bytes-long"
        ENCRYPTION_KEY: "test-encryption-key-32-bytes-long"
        SMTP_HOST: "localhost"
        SMTP_PORT: "1025"
        SMTP_USER: "test"
        SMTP_PASSWORD: "test"
      run: |
        go test -v -race -coverprofile=coverage.txt -covermode=atomic ./internal/...
        go tool cover -func=coverage.txt

    - name: Run Go linting
      uses: golangci/golangci-lint-action@v3
      with:
        version: v1.54
        args: --timeout=5m
        skip-pkg-cache: true

    - name: Run security scan
      uses: securego/gosec@master
      with:
        args: ./...

    - name: Build Go application
      run: |
        go build -o bin/server cmd/server/main.go
        go build -o bin/migrate cmd/migrate/main.go

    - name: Run frontend linting
      run: pnpm run lint

    - name: Build frontend
      run: pnpm run build

    - name: Run integration tests
      env:
        DATABASE_URL: postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable
        REDIS_URL: redis://localhost:6379/0
        JWT_ACCESS_SECRET: test-secret-key-32-bytes-long-123456
        JWT_REFRESH_SECRET: test-refresh-secret-key-32-bytes-long
        ENCRYPTION_KEY: test-encryption-key-32-bytes-long
      run: go test -v -tags=integration ./tests/...

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # - name: Login to GitHub Container Registry
    #   if: github.event_name != 'pull_request'
    #   uses: docker/login-action@v3
    #   with:
    #     registry: ghcr.io
    #     username: ${{ github.actor }}
    #     password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=sha,prefix=
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add deployment commands here
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests"
        # Add smoke test commands here