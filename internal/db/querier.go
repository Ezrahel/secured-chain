// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	CleanExpiredAuthTokens(ctx context.Context) error
	CleanExpiredEmailTokens(ctx context.Context) error
	CleanOldFailedLoginAttempts(ctx context.Context, attemptedAt pgtype.Timestamptz) error
	CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) (AuthAuditLog, error)
	CreateAuthToken(ctx context.Context, arg CreateAuthTokenParams) (AuthToken, error)
	CreateEmailToken(ctx context.Context, arg CreateEmailTokenParams) (EmailToken, error)
	CreateFailedLoginAttempt(ctx context.Context, arg CreateFailedLoginAttemptParams) error
	CreateMFASecret(ctx context.Context, arg CreateMFASecretParams) (MfaSecret, error)
	CreateUser(ctx context.Context, arg CreateUserParams) (User, error)
	DeleteMFASecret(ctx context.Context, userID pgtype.UUID) error
	DisableMFA(ctx context.Context, userID pgtype.UUID) error
	DisableUser(ctx context.Context, id pgtype.UUID) error
	EnableMFA(ctx context.Context, userID pgtype.UUID) error
	EnableUser(ctx context.Context, id pgtype.UUID) error
	GetAuditLogsByEventType(ctx context.Context, arg GetAuditLogsByEventTypeParams) ([]AuthAuditLog, error)
	GetAuthToken(ctx context.Context, tokenHash []byte) (AuthToken, error)
	GetAuthTokenByDeviceID(ctx context.Context, arg GetAuthTokenByDeviceIDParams) (AuthToken, error)
	GetEmailToken(ctx context.Context, tokenHash []byte) (EmailToken, error)
	GetFailedLoginAttemptsByIP(ctx context.Context, arg GetFailedLoginAttemptsByIPParams) (int64, error)
	GetFailedLoginAttemptsByUsername(ctx context.Context, arg GetFailedLoginAttemptsByUsernameParams) (int64, error)
	GetLastAuditLogHash(ctx context.Context) ([]byte, error)
	GetMFASecret(ctx context.Context, userID pgtype.UUID) (MfaSecret, error)
	GetUserAuditLogs(ctx context.Context, arg GetUserAuditLogsParams) ([]AuthAuditLog, error)
	GetUserAuthTokens(ctx context.Context, userID pgtype.UUID) ([]AuthToken, error)
	GetUserByEmail(ctx context.Context, email string) (User, error)
	GetUserByEmailOrUsername(ctx context.Context, email string) (User, error)
	GetUserByID(ctx context.Context, id pgtype.UUID) (User, error)
	GetUserByUsername(ctx context.Context, username string) (User, error)
	IncrementFailedLoginAttempts(ctx context.Context, id pgtype.UUID) error
	LockUser(ctx context.Context, arg LockUserParams) error
	RevokeAuthToken(ctx context.Context, id pgtype.UUID) error
	RevokeAuthTokenByHash(ctx context.Context, tokenHash []byte) error
	RevokeUserAuthTokens(ctx context.Context, userID pgtype.UUID) error
	RevokeUserEmailTokens(ctx context.Context, arg RevokeUserEmailTokensParams) error
	UnlockUser(ctx context.Context, id pgtype.UUID) error
	UpdateAuthTokenLastSeen(ctx context.Context, id pgtype.UUID) error
	UpdateMFALastUsed(ctx context.Context, userID pgtype.UUID) error
	UpdateUserEmailVerified(ctx context.Context, id pgtype.UUID) error
	UpdateUserMetadata(ctx context.Context, arg UpdateUserMetadataParams) error
	UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error
	UseEmailToken(ctx context.Context, id pgtype.UUID) error
}

var _ Querier = (*Queries)(nil)
