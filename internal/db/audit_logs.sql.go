// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: audit_logs.sql

package db

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuditLog = `-- name: CreateAuditLog :one
INSERT INTO auth_audit_logs (
    user_id, event_type, event_payload, ip_address, user_agent, prev_hash, hash
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, user_id, event_type, event_payload, occurred_at, ip_address, user_agent, prev_hash, hash
`

type CreateAuditLogParams struct {
	UserID       pgtype.UUID `json:"user_id"`
	EventType    string      `json:"event_type"`
	EventPayload []byte      `json:"event_payload"`
	IpAddress    *netip.Addr `json:"ip_address"`
	UserAgent    pgtype.Text `json:"user_agent"`
	PrevHash     []byte      `json:"prev_hash"`
	Hash         []byte      `json:"hash"`
}

func (q *Queries) CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) (AuthAuditLog, error) {
	row := q.db.QueryRow(ctx, createAuditLog,
		arg.UserID,
		arg.EventType,
		arg.EventPayload,
		arg.IpAddress,
		arg.UserAgent,
		arg.PrevHash,
		arg.Hash,
	)
	var i AuthAuditLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventType,
		&i.EventPayload,
		&i.OccurredAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.PrevHash,
		&i.Hash,
	)
	return i, err
}

const getAuditLogsByEventType = `-- name: GetAuditLogsByEventType :many
SELECT id, user_id, event_type, event_payload, occurred_at, ip_address, user_agent, prev_hash, hash FROM auth_audit_logs 
WHERE event_type = $1 AND occurred_at >= $2
ORDER BY occurred_at DESC 
LIMIT $3 OFFSET $4
`

type GetAuditLogsByEventTypeParams struct {
	EventType  string             `json:"event_type"`
	OccurredAt pgtype.Timestamptz `json:"occurred_at"`
	Limit      int32              `json:"limit"`
	Offset     int32              `json:"offset"`
}

func (q *Queries) GetAuditLogsByEventType(ctx context.Context, arg GetAuditLogsByEventTypeParams) ([]AuthAuditLog, error) {
	rows, err := q.db.Query(ctx, getAuditLogsByEventType,
		arg.EventType,
		arg.OccurredAt,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuthAuditLog{}
	for rows.Next() {
		var i AuthAuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EventType,
			&i.EventPayload,
			&i.OccurredAt,
			&i.IpAddress,
			&i.UserAgent,
			&i.PrevHash,
			&i.Hash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastAuditLogHash = `-- name: GetLastAuditLogHash :one
SELECT hash FROM auth_audit_logs ORDER BY id DESC LIMIT 1
`

func (q *Queries) GetLastAuditLogHash(ctx context.Context) ([]byte, error) {
	row := q.db.QueryRow(ctx, getLastAuditLogHash)
	var hash []byte
	err := row.Scan(&hash)
	return hash, err
}

const getUserAuditLogs = `-- name: GetUserAuditLogs :many
SELECT id, user_id, event_type, event_payload, occurred_at, ip_address, user_agent, prev_hash, hash FROM auth_audit_logs 
WHERE user_id = $1 
ORDER BY occurred_at DESC 
LIMIT $2 OFFSET $3
`

type GetUserAuditLogsParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) GetUserAuditLogs(ctx context.Context, arg GetUserAuditLogsParams) ([]AuthAuditLog, error) {
	rows, err := q.db.Query(ctx, getUserAuditLogs, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuthAuditLog{}
	for rows.Next() {
		var i AuthAuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EventType,
			&i.EventPayload,
			&i.OccurredAt,
			&i.IpAddress,
			&i.UserAgent,
			&i.PrevHash,
			&i.Hash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
