// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: failed_login_attempts.sql

package db

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const cleanOldFailedLoginAttempts = `-- name: CleanOldFailedLoginAttempts :exec
DELETE FROM failed_login_attempts WHERE attempted_at < $1
`

func (q *Queries) CleanOldFailedLoginAttempts(ctx context.Context, attemptedAt pgtype.Timestamptz) error {
	_, err := q.db.Exec(ctx, cleanOldFailedLoginAttempts, attemptedAt)
	return err
}

const createFailedLoginAttempt = `-- name: CreateFailedLoginAttempt :exec
INSERT INTO failed_login_attempts (
    ip_address, username_or_email, user_agent
) VALUES (
    $1, $2, $3
)
`

type CreateFailedLoginAttemptParams struct {
	IpAddress       netip.Addr  `json:"ip_address"`
	UsernameOrEmail string      `json:"username_or_email"`
	UserAgent       pgtype.Text `json:"user_agent"`
}

func (q *Queries) CreateFailedLoginAttempt(ctx context.Context, arg CreateFailedLoginAttemptParams) error {
	_, err := q.db.Exec(ctx, createFailedLoginAttempt, arg.IpAddress, arg.UsernameOrEmail, arg.UserAgent)
	return err
}

const getFailedLoginAttemptsByIP = `-- name: GetFailedLoginAttemptsByIP :one
SELECT COUNT(*) FROM failed_login_attempts 
WHERE ip_address = $1 AND attempted_at > $2
`

type GetFailedLoginAttemptsByIPParams struct {
	IpAddress   netip.Addr         `json:"ip_address"`
	AttemptedAt pgtype.Timestamptz `json:"attempted_at"`
}

func (q *Queries) GetFailedLoginAttemptsByIP(ctx context.Context, arg GetFailedLoginAttemptsByIPParams) (int64, error) {
	row := q.db.QueryRow(ctx, getFailedLoginAttemptsByIP, arg.IpAddress, arg.AttemptedAt)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getFailedLoginAttemptsByUsername = `-- name: GetFailedLoginAttemptsByUsername :one
SELECT COUNT(*) FROM failed_login_attempts 
WHERE username_or_email = $1 AND attempted_at > $2
`

type GetFailedLoginAttemptsByUsernameParams struct {
	UsernameOrEmail string             `json:"username_or_email"`
	AttemptedAt     pgtype.Timestamptz `json:"attempted_at"`
}

func (q *Queries) GetFailedLoginAttemptsByUsername(ctx context.Context, arg GetFailedLoginAttemptsByUsernameParams) (int64, error) {
	row := q.db.QueryRow(ctx, getFailedLoginAttemptsByUsername, arg.UsernameOrEmail, arg.AttemptedAt)
	var count int64
	err := row.Scan(&count)
	return count, err
}
