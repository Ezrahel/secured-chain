// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: mfa.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMFASecret = `-- name: CreateMFASecret :one
INSERT INTO mfa_secrets (
    user_id, secret_encrypted, backup_codes_encrypted
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, secret_encrypted, backup_codes_encrypted, enabled, created_at, last_used_at
`

type CreateMFASecretParams struct {
	UserID               pgtype.UUID `json:"user_id"`
	SecretEncrypted      []byte      `json:"secret_encrypted"`
	BackupCodesEncrypted []byte      `json:"backup_codes_encrypted"`
}

func (q *Queries) CreateMFASecret(ctx context.Context, arg CreateMFASecretParams) (MfaSecret, error) {
	row := q.db.QueryRow(ctx, createMFASecret, arg.UserID, arg.SecretEncrypted, arg.BackupCodesEncrypted)
	var i MfaSecret
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SecretEncrypted,
		&i.BackupCodesEncrypted,
		&i.Enabled,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const deleteMFASecret = `-- name: DeleteMFASecret :exec
DELETE FROM mfa_secrets WHERE user_id = $1
`

func (q *Queries) DeleteMFASecret(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteMFASecret, userID)
	return err
}

const disableMFA = `-- name: DisableMFA :exec
UPDATE mfa_secrets SET enabled = false WHERE user_id = $1
`

func (q *Queries) DisableMFA(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, disableMFA, userID)
	return err
}

const enableMFA = `-- name: EnableMFA :exec
UPDATE mfa_secrets SET enabled = true WHERE user_id = $1
`

func (q *Queries) EnableMFA(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, enableMFA, userID)
	return err
}

const getMFASecret = `-- name: GetMFASecret :one
SELECT id, user_id, secret_encrypted, backup_codes_encrypted, enabled, created_at, last_used_at FROM mfa_secrets WHERE user_id = $1
`

func (q *Queries) GetMFASecret(ctx context.Context, userID pgtype.UUID) (MfaSecret, error) {
	row := q.db.QueryRow(ctx, getMFASecret, userID)
	var i MfaSecret
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SecretEncrypted,
		&i.BackupCodesEncrypted,
		&i.Enabled,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const updateMFALastUsed = `-- name: UpdateMFALastUsed :exec
UPDATE mfa_secrets SET last_used_at = now() WHERE user_id = $1
`

func (q *Queries) UpdateMFALastUsed(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateMFALastUsed, userID)
	return err
}
