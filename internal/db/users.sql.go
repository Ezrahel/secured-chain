// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    fullname, username, email, password_hash, password_algo
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, fullname, username, email, email_verified, password_hash, password_algo, created_at, updated_at, disabled, failed_login_attempts, locked_until, metadata
`

type CreateUserParams struct {
	Fullname     string `json:"fullname"`
	Username     string `json:"username"`
	Email        string `json:"email"`
	PasswordHash []byte `json:"password_hash"`
	PasswordAlgo string `json:"password_algo"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Fullname,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.PasswordAlgo,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.PasswordAlgo,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Disabled,
		&i.FailedLoginAttempts,
		&i.LockedUntil,
		&i.Metadata,
	)
	return i, err
}

const disableUser = `-- name: DisableUser :exec
UPDATE users SET disabled = true, updated_at = now() WHERE id = $1
`

func (q *Queries) DisableUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, disableUser, id)
	return err
}

const enableUser = `-- name: EnableUser :exec
UPDATE users SET disabled = false, updated_at = now() WHERE id = $1
`

func (q *Queries) EnableUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, enableUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, fullname, username, email, email_verified, password_hash, password_algo, created_at, updated_at, disabled, failed_login_attempts, locked_until, metadata FROM users WHERE email = $1 AND disabled = false
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.PasswordAlgo,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Disabled,
		&i.FailedLoginAttempts,
		&i.LockedUntil,
		&i.Metadata,
	)
	return i, err
}

const getUserByEmailOrUsername = `-- name: GetUserByEmailOrUsername :one
SELECT id, fullname, username, email, email_verified, password_hash, password_algo, created_at, updated_at, disabled, failed_login_attempts, locked_until, metadata FROM users 
WHERE (email = $1 OR username = $1) AND disabled = false
`

func (q *Queries) GetUserByEmailOrUsername(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmailOrUsername, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.PasswordAlgo,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Disabled,
		&i.FailedLoginAttempts,
		&i.LockedUntil,
		&i.Metadata,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, fullname, username, email, email_verified, password_hash, password_algo, created_at, updated_at, disabled, failed_login_attempts, locked_until, metadata FROM users WHERE id = $1 AND disabled = false
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.PasswordAlgo,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Disabled,
		&i.FailedLoginAttempts,
		&i.LockedUntil,
		&i.Metadata,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, fullname, username, email, email_verified, password_hash, password_algo, created_at, updated_at, disabled, failed_login_attempts, locked_until, metadata FROM users WHERE username = $1 AND disabled = false
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.PasswordAlgo,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Disabled,
		&i.FailedLoginAttempts,
		&i.LockedUntil,
		&i.Metadata,
	)
	return i, err
}

const incrementFailedLoginAttempts = `-- name: IncrementFailedLoginAttempts :exec
UPDATE users SET 
    failed_login_attempts = failed_login_attempts + 1,
    updated_at = now()
WHERE id = $1
`

func (q *Queries) IncrementFailedLoginAttempts(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, incrementFailedLoginAttempts, id)
	return err
}

const lockUser = `-- name: LockUser :exec
UPDATE users SET 
    locked_until = $2,
    updated_at = now()
WHERE id = $1
`

type LockUserParams struct {
	ID          pgtype.UUID        `json:"id"`
	LockedUntil pgtype.Timestamptz `json:"locked_until"`
}

func (q *Queries) LockUser(ctx context.Context, arg LockUserParams) error {
	_, err := q.db.Exec(ctx, lockUser, arg.ID, arg.LockedUntil)
	return err
}

const unlockUser = `-- name: UnlockUser :exec
UPDATE users SET 
    failed_login_attempts = 0,
    locked_until = NULL,
    updated_at = now()
WHERE id = $1
`

func (q *Queries) UnlockUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, unlockUser, id)
	return err
}

const updateUserEmailVerified = `-- name: UpdateUserEmailVerified :exec
UPDATE users SET email_verified = true, updated_at = now() 
WHERE id = $1
`

func (q *Queries) UpdateUserEmailVerified(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateUserEmailVerified, id)
	return err
}

const updateUserMetadata = `-- name: UpdateUserMetadata :exec
UPDATE users SET metadata = $2, updated_at = now() WHERE id = $1
`

type UpdateUserMetadataParams struct {
	ID       pgtype.UUID `json:"id"`
	Metadata []byte      `json:"metadata"`
}

func (q *Queries) UpdateUserMetadata(ctx context.Context, arg UpdateUserMetadataParams) error {
	_, err := q.db.Exec(ctx, updateUserMetadata, arg.ID, arg.Metadata)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users SET 
    password_hash = $2, 
    password_algo = $3, 
    failed_login_attempts = 0,
    locked_until = NULL,
    updated_at = now()
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID           pgtype.UUID `json:"id"`
	PasswordHash []byte      `json:"password_hash"`
	PasswordAlgo string      `json:"password_algo"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.PasswordHash, arg.PasswordAlgo)
	return err
}
