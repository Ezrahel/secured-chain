// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: email_tokens.sql

package db

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const cleanExpiredEmailTokens = `-- name: CleanExpiredEmailTokens :exec
DELETE FROM email_tokens WHERE expires_at < now()
`

func (q *Queries) CleanExpiredEmailTokens(ctx context.Context) error {
	_, err := q.db.Exec(ctx, cleanExpiredEmailTokens)
	return err
}

const createEmailToken = `-- name: CreateEmailToken :one
INSERT INTO email_tokens (
    user_id, token_hash, purpose, expires_at, ip_address, user_agent
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, user_id, token_hash, purpose, created_at, expires_at, used_at, ip_address, user_agent
`

type CreateEmailTokenParams struct {
	UserID    pgtype.UUID        `json:"user_id"`
	TokenHash []byte             `json:"token_hash"`
	Purpose   string             `json:"purpose"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
	IpAddress *netip.Addr        `json:"ip_address"`
	UserAgent pgtype.Text        `json:"user_agent"`
}

func (q *Queries) CreateEmailToken(ctx context.Context, arg CreateEmailTokenParams) (EmailToken, error) {
	row := q.db.QueryRow(ctx, createEmailToken,
		arg.UserID,
		arg.TokenHash,
		arg.Purpose,
		arg.ExpiresAt,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i EmailToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.Purpose,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.UsedAt,
		&i.IpAddress,
		&i.UserAgent,
	)
	return i, err
}

const getEmailToken = `-- name: GetEmailToken :one
SELECT id, user_id, token_hash, purpose, created_at, expires_at, used_at, ip_address, user_agent FROM email_tokens 
WHERE token_hash = $1 AND used_at IS NULL AND expires_at > now()
`

func (q *Queries) GetEmailToken(ctx context.Context, tokenHash []byte) (EmailToken, error) {
	row := q.db.QueryRow(ctx, getEmailToken, tokenHash)
	var i EmailToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.Purpose,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.UsedAt,
		&i.IpAddress,
		&i.UserAgent,
	)
	return i, err
}

const revokeUserEmailTokens = `-- name: RevokeUserEmailTokens :exec
UPDATE email_tokens SET used_at = now() 
WHERE user_id = $1 AND purpose = $2 AND used_at IS NULL
`

type RevokeUserEmailTokensParams struct {
	UserID  pgtype.UUID `json:"user_id"`
	Purpose string      `json:"purpose"`
}

func (q *Queries) RevokeUserEmailTokens(ctx context.Context, arg RevokeUserEmailTokensParams) error {
	_, err := q.db.Exec(ctx, revokeUserEmailTokens, arg.UserID, arg.Purpose)
	return err
}

const useEmailToken = `-- name: UseEmailToken :exec
UPDATE email_tokens SET used_at = now() WHERE id = $1
`

func (q *Queries) UseEmailToken(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, useEmailToken, id)
	return err
}
