// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: auth_tokens.sql

package db

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const cleanExpiredAuthTokens = `-- name: CleanExpiredAuthTokens :exec
DELETE FROM auth_tokens WHERE expires_at < now()
`

func (q *Queries) CleanExpiredAuthTokens(ctx context.Context) error {
	_, err := q.db.Exec(ctx, cleanExpiredAuthTokens)
	return err
}

const createAuthToken = `-- name: CreateAuthToken :one
INSERT INTO auth_tokens (
    user_id, token_hash, device_id, ip_address, user_agent, expires_at, device_fingerprint
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, user_id, token_hash, device_id, ip_address, user_agent, created_at, expires_at, revoked_at, rotate_count, last_seen_at, device_fingerprint
`

type CreateAuthTokenParams struct {
	UserID            pgtype.UUID        `json:"user_id"`
	TokenHash         []byte             `json:"token_hash"`
	DeviceID          pgtype.Text        `json:"device_id"`
	IpAddress         *netip.Addr        `json:"ip_address"`
	UserAgent         pgtype.Text        `json:"user_agent"`
	ExpiresAt         pgtype.Timestamptz `json:"expires_at"`
	DeviceFingerprint pgtype.Text        `json:"device_fingerprint"`
}

func (q *Queries) CreateAuthToken(ctx context.Context, arg CreateAuthTokenParams) (AuthToken, error) {
	row := q.db.QueryRow(ctx, createAuthToken,
		arg.UserID,
		arg.TokenHash,
		arg.DeviceID,
		arg.IpAddress,
		arg.UserAgent,
		arg.ExpiresAt,
		arg.DeviceFingerprint,
	)
	var i AuthToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.DeviceID,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.RotateCount,
		&i.LastSeenAt,
		&i.DeviceFingerprint,
	)
	return i, err
}

const getAuthToken = `-- name: GetAuthToken :one
SELECT id, user_id, token_hash, device_id, ip_address, user_agent, created_at, expires_at, revoked_at, rotate_count, last_seen_at, device_fingerprint FROM auth_tokens 
WHERE token_hash = $1 AND revoked_at IS NULL AND expires_at > now()
`

func (q *Queries) GetAuthToken(ctx context.Context, tokenHash []byte) (AuthToken, error) {
	row := q.db.QueryRow(ctx, getAuthToken, tokenHash)
	var i AuthToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.DeviceID,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.RotateCount,
		&i.LastSeenAt,
		&i.DeviceFingerprint,
	)
	return i, err
}

const getAuthTokenByDeviceID = `-- name: GetAuthTokenByDeviceID :one
SELECT id, user_id, token_hash, device_id, ip_address, user_agent, created_at, expires_at, revoked_at, rotate_count, last_seen_at, device_fingerprint FROM auth_tokens 
WHERE user_id = $1 AND device_id = $2 AND revoked_at IS NULL AND expires_at > now()
ORDER BY created_at DESC LIMIT 1
`

type GetAuthTokenByDeviceIDParams struct {
	UserID   pgtype.UUID `json:"user_id"`
	DeviceID pgtype.Text `json:"device_id"`
}

func (q *Queries) GetAuthTokenByDeviceID(ctx context.Context, arg GetAuthTokenByDeviceIDParams) (AuthToken, error) {
	row := q.db.QueryRow(ctx, getAuthTokenByDeviceID, arg.UserID, arg.DeviceID)
	var i AuthToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.DeviceID,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.RotateCount,
		&i.LastSeenAt,
		&i.DeviceFingerprint,
	)
	return i, err
}

const getUserAuthTokens = `-- name: GetUserAuthTokens :many
SELECT id, user_id, token_hash, device_id, ip_address, user_agent, created_at, expires_at, revoked_at, rotate_count, last_seen_at, device_fingerprint FROM auth_tokens 
WHERE user_id = $1 AND revoked_at IS NULL AND expires_at > now()
ORDER BY created_at DESC
`

func (q *Queries) GetUserAuthTokens(ctx context.Context, userID pgtype.UUID) ([]AuthToken, error) {
	rows, err := q.db.Query(ctx, getUserAuthTokens, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuthToken{}
	for rows.Next() {
		var i AuthToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TokenHash,
			&i.DeviceID,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.RevokedAt,
			&i.RotateCount,
			&i.LastSeenAt,
			&i.DeviceFingerprint,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeAuthToken = `-- name: RevokeAuthToken :exec
UPDATE auth_tokens SET revoked_at = now() WHERE id = $1
`

func (q *Queries) RevokeAuthToken(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, revokeAuthToken, id)
	return err
}

const revokeAuthTokenByHash = `-- name: RevokeAuthTokenByHash :exec
UPDATE auth_tokens SET revoked_at = now() WHERE token_hash = $1
`

func (q *Queries) RevokeAuthTokenByHash(ctx context.Context, tokenHash []byte) error {
	_, err := q.db.Exec(ctx, revokeAuthTokenByHash, tokenHash)
	return err
}

const revokeUserAuthTokens = `-- name: RevokeUserAuthTokens :exec
UPDATE auth_tokens SET revoked_at = now() 
WHERE user_id = $1 AND revoked_at IS NULL
`

func (q *Queries) RevokeUserAuthTokens(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, revokeUserAuthTokens, userID)
	return err
}

const updateAuthTokenLastSeen = `-- name: UpdateAuthTokenLastSeen :exec
UPDATE auth_tokens SET 
    last_seen_at = now(),
    rotate_count = rotate_count + 1
WHERE id = $1
`

func (q *Queries) UpdateAuthTokenLastSeen(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateAuthTokenLastSeen, id)
	return err
}
